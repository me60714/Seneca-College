// Name: Wei-Chih Kao
// Email: wkao3@myseneca.ca
// StudentID: 158000190
// Date: 2021.Nov.02
// I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.

1. Why do you need to deallocate the dynamically allocated memory in your vector?

The vector "m_vehicles" we created in the Autoshop module is a pointer. It is stored as dynamical memory. We resized the vector by creating new Car or Racecar Objects. If we don't deallocate the dynamically allocated memory in our vector, it will cause memory leak. 

2. When building an object from the input file, different things can go wrong: the record represents an unknown type of vehicle, or record contains invalid data. How can the function loadData() detect what went wrong? Can you think at another solution than the one you have implemented?

In function loadData(), I used try and catch to detect the errors:

        try
		{
			sdds::Vehicle* aVehicle = sdds::createInstance(file);
			if (aVehicle)
				as += aVehicle;
		}
		catch(std::string& e)
		{
			std::cout << e << std::endl;
		}
		catch(std::invalid_argument& e)
		{
			std::cout << "Invalid record!" << std::endl;
		}

One of another solution could be reading files from the main function directly and write a function to evaluate the data in the Car module.

3. In this workshop you had to use std::list<sdds::Vehicle*> and std::vector<sdds::Vehicle*> to store a collection of vehicles as pointers. Could you have used std::list<sdds::Vehicle> and std::vector<sdds::Vehicle> instead?

No, we can't use std::list<sdds::Vehicle> and std::vector<sdds::Vehicle> instead. Because inside of the container, it must be the type of data. However, Vehicle is not a type but a name of class. The data type of Vehicle is the pointer of Vehicle. Besides, dynamic allocation and deallocation can't work without the pointer of Vehicle.